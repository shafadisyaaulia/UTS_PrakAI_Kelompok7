import React, { useState, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { FiPlant, FiSun, FiDroplet, FiAward, FiHelpCircle } from 'react-icons/fi';
import { Card, Title, Text, Metric, AreaChart } from '@tremor/react';

// URL API Python Flask
const API_BASE_URL = 'http://127.0.0.1:5000/api';

// Komponen Card UI yang modern dan responsif
const ModernCard = ({ title, children, className = '', icon: Icon }) => (
    <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className={`card-modern p-6 ${className}`}
    >
        <div className="flex items-center gap-3 mb-4">
            {Icon && (
                <div className="p-3 rounded-xl bg-primary/10 text-primary">
                    <Icon className="w-6 h-6" />
                </div>
            )}
            <h2 className="title-font text-2xl font-bold text-gray-800">{title}</h2>
        </div>
        {children}
    </motion.div>
);

// Fungsi utilitas untuk mengubah format string
const formatDiagnosisName = (name) => {
    if (!name) return "N/A";
    const parts = name.split('_');
    if (parts.length > 2) {
        return `${parts[0]} ${parts[1]} (${parts[2]})`;
    }
    return name.replace(/_/g, ' ');
};

// Komponen Utama Aplikasi
const App = () => {
  const [fase, setFase] = useState('fase_vegetatif');
  const [symptoms, setSymptoms] = useState([]);
  const [selectedSymptoms, setSelectedSymptoms] = useState([]);
  const [diagnosisResult, setDiagnosisResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [apiStatus, setApiStatus] = useState({ connected: false, message: 'Menunggu koneksi ke Backend Python...' });
  const [showExplanation, setShowExplanation] = useState(false);

  // Fetch Daftar Gejala dari Backend
  const fetchSymptoms = useCallback(async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/symptoms`);
      if (!response.ok) throw new Error("Gagal mengambil daftar gejala.");
      const data = await response.json();
      setSymptoms(data.symptoms);
      setApiStatus({ connected: true, message: 'Backend Python terhubung di port 5000.' });
    } catch (error) {
      console.error("Fetch Symptoms Error:", error);
      setSymptoms([]);
      setApiStatus({ connected: false, message: 'Gagal koneksi ke Backend. Pastikan Flask berjalan di port 5000.' });
    }
  }, []);

  useEffect(() => {
    fetchSymptoms();
  }, [fetchSymptoms]);

  // Handler Checkbox Gejala
  const handleSymptomChange = (symptom) => {
    setSelectedSymptoms(prev =>
      prev.includes(symptom)
        ? prev.filter(s => s !== symptom)
        : [...prev, symptom]
    );
  };

  // Fungsi Diagnosis
  const handleDiagnose = async () => {
    if (selectedSymptoms.length === 0) {
      alert("Pilih minimal satu gejala visual.");
      return;
    }

    setLoading(true);
    setDiagnosisResult(null);
    setShowExplanation(false);

    const payload = {
      fase: fase,
      symptoms: selectedSymptoms,
    };

    try {
      const response = await fetch(`${API_BASE_URL}/diagnose`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

      const data = await response.json();

      if (data.success) {
        setDiagnosisResult(data.result);
      } else {
        alert('Error dari Server: ' + data.message);
      }

    } catch (error) {
      console.error('Fetch Diagnosis Error:', error);
      alert('Gagal menjalankan diagnosis. Periksa koneksi ke API dan konsol.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4 sm:p-8 font-sans">
      <motion.header
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center mb-8 glass-card p-8 rounded-3xl"
      >
        <div className="flex items-center justify-center gap-3 mb-4">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
            className="text-4xl"
          >
            üå∂Ô∏è
          </motion.div>
          <h1 className="text-4xl font-extrabold gradient-text title-font">Sistem Pakar Pemupukan Cabai</h1>
        </div>
        <p className="text-gray-600 mt-2 text-lg">Diagnosis Cepat Defisiensi Unsur Hara dan Rekomendasi Pemupukan</p>
        <motion.div
          initial={{ scale: 0.9 }}
          animate={{ scale: 1 }}
          className={`mt-4 text-sm font-semibold p-3 rounded-2xl inline-block ${
            apiStatus.connected ? 'bg-green-100/80 text-green-700' : 'bg-red-100/80 text-red-700'
          }`}
        >
          <div className="flex items-center gap-2">
            <div className={`w-2 h-2 rounded-full ${apiStatus.connected ? 'bg-green-500' : 'bg-red-500'} animate-pulse`}></div>
            {apiStatus.message}
          </div>
        </motion.div>
      </motion.header>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-7xl mx-auto">
        {/* Input Column */}
        <div className="lg:col-span-1 space-y-8">
          <ModernCard title="Fase Pertumbuhan" icon={FiSun}>
            <div className="flex flex-col space-y-4">
              <motion.label
                whileHover={{ scale: 1.02 }}
                className="flex items-center gap-4 cursor-pointer p-4 rounded-2xl bg-yellow-50/50 hover:bg-yellow-50 transition-all duration-300"
              >
                <div className="relative">
                  <input
                    type="radio"
                    value="fase_vegetatif"
                    checked={fase === 'fase_vegetatif'}
                    onChange={(e) => setFase(e.target.value)}
                    className="checkbox-modern sr-only"
                  />
                  <div className={`w-6 h-6 rounded-xl border-2 transition-all duration-200 ${
                    fase === 'fase_vegetatif'
                      ? 'border-yellow-500 bg-yellow-500'
                      : 'border-gray-300'
                  }`}>
                    {fase === 'fase_vegetatif' && (
                      <motion.svg
                        initial={{ scale: 0 }}
                        animate={{ scale: 1 }}
                        className="w-full h-full text-white p-1"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="3"
                      >
                        <polyline points="20 6 9 17 4 12"></polyline>
                      </motion.svg>
                    )}
                  </div>
                </div>
                <div>
                  <p className="font-semibold text-gray-800">Fase Vegetatif</p>
                  <p className="text-sm text-gray-600">Pembentukan Daun & Akar</p>
                </div>
              </motion.label>

              <motion.label
                whileHover={{ scale: 1.02 }}
                className="flex items-center gap-4 cursor-pointer p-4 rounded-2xl bg-red-50/50 hover:bg-red-50 transition-all duration-300"
              >
                <div className="relative">
                  <input
                    type="radio"
                    value="fase_generatif"
                    checked={fase === 'fase_generatif'}
                    onChange={(e) => setFase(e.target.value)}
                    className="checkbox-modern sr-only"
                  />
                  <div className={`w-6 h-6 rounded-xl border-2 transition-all duration-200 ${
                    fase === 'fase_generatif'
                      ? 'border-red-500 bg-red-500'
                      : 'border-gray-300'
                  }`}>
                    {fase === 'fase_generatif' && (
                      <motion.svg
                        initial={{ scale: 0 }}
                        animate={{ scale: 1 }}
                        className="w-full h-full text-white p-1"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="3"
                      >
                        <polyline points="20 6 9 17 4 12"></polyline>
                      </motion.svg>
                    )}
                  </div>
                </div>
                <div>
                  <p className="font-semibold text-gray-800">Fase Generatif</p>
                  <p className="text-sm text-gray-600">Pembungaan & Pembuahan</p>
                </div>
              </motion.label>
            </div>
          </ModernCard>

          <ModernCard title="Gejala Visual" icon={FiPlant}>
            <div className="space-y-3 max-h-[480px] overflow-y-auto pr-2 custom-scrollbar">
              {symptoms.length > 0 ? (
                <div className="grid gap-3">
                  {symptoms.map(sym => (
                    <motion.label
                      key={sym}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      className={`flex items-center gap-4 p-4 rounded-2xl cursor-pointer transition-all duration-200 ${
                        selectedSymptoms.includes(sym)
                          ? 'bg-primary/10 border-2 border-primary'
                          : 'bg-gray-50/50 hover:bg-gray-100/50 border-2 border-transparent'
                      }`}
                    >
                      <div className="relative flex-shrink-0">
                        <input
                          type="checkbox"
                          checked={selectedSymptoms.includes(sym)}
                          onChange={() => handleSymptomChange(sym)}
                          className="checkbox-modern sr-only"
                        />
                        <div className={`w-6 h-6 rounded-xl border-2 transition-all duration-200 ${
                          selectedSymptoms.includes(sym)
                            ? 'border-primary bg-primary'
                            : 'border-gray-300'
                        }`}>
                          {selectedSymptoms.includes(sym) && (
                            <motion.svg
                              initial={{ scale: 0 }}
                              animate={{ scale: 1 }}
                              className="w-full h-full text-white p-1"
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              strokeWidth="3"
                            >
                              <polyline points="20 6 9 17 4 12"></polyline>
                            </motion.svg>
                          )}
                        </div>
                      </div>
                      <span className="text-sm font-medium text-gray-700 capitalize">
                        {sym.replace(/_/g, ' ')}
                      </span>
                    </motion.label>
                  ))}
                </div>
              ) : (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="text-center py-8"
                >
                  <FiHelpCircle className="w-12 h-12 mx-auto text-red-500 mb-3" />
                  <p className="text-red-500 font-medium">Gagal memuat gejala dari Knowledge Base</p>
                  <p className="text-sm text-gray-500 mt-1">Periksa koneksi ke backend atau file app.py</p>
                </motion.div>
              )}
            </div>
          </ModernCard>

          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={handleDiagnose}
            disabled={loading || selectedSymptoms.length === 0 || !apiStatus.connected}
            className={`w-full py-4 px-6 rounded-2xl font-bold text-white shadow-xl transition-all duration-300 
              ${loading ? 'bg-yellow-500' : 'bg-primary hover:bg-primary-dark'} 
              disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100
              flex items-center justify-center gap-3`}
          >
            {loading ? (
              <>
                <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent"></div>
                <span>Menganalisis dengan CF...</span>
              </>
            ) : (
              <>
                <FiAward className="w-5 h-5" />
                <span>Mulai Diagnosis Rekomendasi</span>
              </>
            )}
          </motion.button>
        </div>

        {/* Results Column */}
        <div className="lg:col-span-2 space-y-6">
          <ModernCard title="Hasil Diagnosis" icon={FiDroplet} className="min-h-[250px]">
            {diagnosisResult ? (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="space-y-6"
              >
                <div className={`glass-card p-6 rounded-2xl border-2 ${
                  diagnosisResult.certainty_factor >= 0.8
                    ? 'border-emerald-500/20 bg-emerald-50/30'
                    : 'border-yellow-500/20 bg-yellow-50/30'
                }`}>
                  <div className="flex items-start justify-between">
                    <div>
                      <h3 className="text-xl font-bold text-gray-900 mb-2">
                        {formatDiagnosisName(diagnosisResult.diagnosis)}
                      </h3>
                      <div className="flex items-center gap-2">
                        <div className="text-sm font-medium text-gray-600">Faktor Kepastian (CF):</div>
                        <div className="badge-modern bg-white/50 backdrop-blur-sm">
                          {Math.round(diagnosisResult.certainty_factor * 100)}%
                        </div>
                      </div>
                    </div>
                    <motion.button
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={() => setShowExplanation(!showExplanation)}
                      className={`px-4 py-2 rounded-xl text-sm font-medium transition-colors ${
                        showExplanation
                          ? 'bg-blue-100 text-blue-700 hover:bg-blue-200'
                          : 'bg-blue-50 text-blue-600 hover:bg-blue-100'
                      }`}
                    >
                      {showExplanation ? 'Sembunyikan Penalaran' : 'Tampilkan Penalaran'}
                    </motion.button>
                  </div>
                </div>

                <div className="space-y-4">
                  <h3 className="text-lg font-bold text-gray-800 flex items-center gap-2">
                    <FiDroplet className="w-5 h-5 text-primary" />
                    Rekomendasi Pemupukan
                  </h3>
                  <div className="relative">
                    <div className="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent rounded-2xl" />
                    <p className="relative bg-white/80 p-5 rounded-2xl border border-gray-100 whitespace-pre-line text-gray-700">
                      {diagnosisResult.recommendation}
                    </p>
                  </div>
                </div>
              </motion.div>
            ) : (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="flex flex-col items-center justify-center h-64 text-center"
              >
                <div className="w-16 h-16 mb-6 relative">
                  <div className="absolute inset-0 bg-primary/20 rounded-full animate-ping" />
                  <div className="relative bg-primary/10 text-primary rounded-full p-4">
                    <FiPlant className="w-8 h-8" />
                  </div>
                </div>
                <h3 className="text-xl font-semibold text-gray-700 mb-2">
                  Sistem Siap Menganalisis
                </h3>
                <p className="text-gray-500">
                  Pilih gejala yang teramati pada tanaman Anda
                </p>
              </motion.div>
            )}
          </ModernCard>

          {/* Explanation Section */}
          {diagnosisResult && showExplanation && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
            >
              <ModernCard title="Alur Penalaran" icon={FiHelpCircle} className="bg-blue-50/50">
                <div className="relative">
                  <div className="absolute inset-0 bg-gradient-to-br from-blue-100/20 to-transparent rounded-2xl" />
                  <pre className="relative font-mono text-sm leading-relaxed text-gray-700 bg-white/80 p-5 rounded-2xl border border-blue-100/50 overflow-x-auto">
                    {diagnosisResult.explanation}
                  </pre>
                </div>
              </ModernCard>
            </motion.div>
          )}
        </div>
      </div>
    </div>
  );
};

export default App;